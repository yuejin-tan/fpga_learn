<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CM3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CM3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 07 22:22:42 2024
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[f]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">ADC_Handler</a><BR>
 <LI><a href="#[d0]">UART_ReceiveData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">UART_ReceiveData</a><BR>
 <LI><a href="#[5e]">SCO_VAR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">SCO_VAR</a><BR>
 <LI><a href="#[5d]">SCO_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">SCO_get</a><BR>
 <LI><a href="#[7f]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">ADC_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[53]">BME280RefreshTask</a> from main.o(i.BME280RefreshTask) referenced from main.o(i.main)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[11]">DMACINTERR_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[13]">DMACINTR_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[12]">DMACINTTC_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[18]">DUALTIMER_HANDLER</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[41]">EXT0_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[4b]">EXT10_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[4c]">EXT11_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[4d]">EXT12_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[1b]">EXT13_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[1c]">EXT14_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[1d]">EXT15_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[42]">EXT1_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[43]">EXT2_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[44]">EXT3_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[45]">EXT4_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[46]">EXT5_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[47]">EXT6_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[48]">EXT7_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[49]">EXT8_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[4a]">EXT9_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[3e]">I2C_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[3f]">MPS2_SSP0_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[40]">MPS2_SSP1_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[1e]">PORT0_0_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[28]">PORT0_10_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[29]">PORT0_11_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[2a]">PORT0_12_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[2b]">PORT0_13_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[2c]">PORT0_14_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[2d]">PORT0_15_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[2e]">PORT0_16_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[2f]">PORT0_17_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[30]">PORT0_18_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[31]">PORT0_19_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[1f]">PORT0_1_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[32]">PORT0_20_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[33]">PORT0_21_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[34]">PORT0_22_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[35]">PORT0_23_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[36]">PORT0_24_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[37]">PORT0_25_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[38]">PORT0_26_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[39]">PORT0_27_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[3a]">PORT0_28_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[3b]">PORT0_29_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[20]">PORT0_2_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[3c]">PORT0_30_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[3d]">PORT0_31_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[21]">PORT0_3_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[22]">PORT0_4_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[23]">PORT0_5_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[24]">PORT0_6_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[25]">PORT0_7_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[26]">PORT0_8_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[27]">PORT0_9_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[14]">PORT0_COMB_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[5c]">SCD_CMD_CALL</a> from scd.o(i.SCD_CMD_CALL) referenced from scd.o(.data)
 <LI><a href="#[5a]">SCD_CMD_CHG</a> from scd.o(i.SCD_CMD_CHG) referenced from scd.o(.data)
 <LI><a href="#[59]">SCD_CMD_CONF</a> from scd.o(i.SCD_CMD_CONF) referenced from scd.o(.data)
 <LI><a href="#[5b]">SCD_CMD_DUMP</a> from scd.o(i.SCD_CMD_DUMP) referenced from scd.o(.data)
 <LI><a href="#[58]">SCD_CMD_SET</a> from scd.o(i.SCD_CMD_SET) referenced from scd.o(.data)
 <LI><a href="#[5f]">SCO_DEBUG</a> from scd.o(i.SCO_DEBUG) referenced from scd.o(.data)
 <LI><a href="#[60]">SCO_DUMP</a> from scd.o(i.SCO_DUMP) referenced from scd.o(.data)
 <LI><a href="#[61]">SCO_PRINT</a> from scd.o(i.SCO_PRINT) referenced from scd.o(.data)
 <LI><a href="#[5e]">SCO_VAR</a> from scd.o(i.SCO_VAR) referenced from scd.o(.data)
 <LI><a href="#[5d]">SCO_get</a> from scd.o(i.SCO_get) referenced from scd.o(.data)
 <LI><a href="#[a]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[19]">Spare11_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[15]">Spare7_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_cm3ds.o(i.SystemInit) referenced from startup_cm3ds.o(.text)
 <LI><a href="#[16]">TIMER0_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[17]">TIMER1_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[e]">UART0_Handler</a> from int_handlers.o(i.UART0_Handler) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[10]">UART1_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[1a]">UARTOVF_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_cm3ds.o(.text) referenced from startup_cm3ds.o(RESET)
 <LI><a href="#[62]">__main</a> from __main.o(!!!main) referenced from startup_cm3ds.o(.text)
 <LI><a href="#[51]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[50]">fputc</a> from cm3_retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[54]">ledRefreshTask</a> from main.o(i.ledRefreshTask) referenced from main.o(i.main)
 <LI><a href="#[56]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[55]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[57]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[52]">touchRefreshTask</a> from main.o(i.touchRefreshTask) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[63]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[65]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[66]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[12d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[67]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[69]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[12e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[76]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[12f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[130]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[132]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[133]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[134]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[135]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[136]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[71]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[138]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[139]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[140]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[141]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[142]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[143]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[144]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[64]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[73]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[75]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[77]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[14f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[7f]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_TICK
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMACINTERR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMACINTR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMACINTTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DUALTIMER_HANDLER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXT0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXT10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXT11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXT12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXT14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXT15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXT1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXT2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXT3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXT4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXT5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXT6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXT7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXT8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXT9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>MPS2_SSP0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>MPS2_SSP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PORT0_0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PORT0_10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PORT0_11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PORT0_12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PORT0_13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PORT0_14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PORT0_15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PORT0_16_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PORT0_17_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PORT0_18_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PORT0_19_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PORT0_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PORT0_20_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PORT0_21_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PORT0_22_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PORT0_23_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PORT0_24_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PORT0_25_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PORT0_26_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PORT0_27_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PORT0_28_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PORT0_29_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PORT0_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PORT0_30_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PORT0_31_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PORT0_3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PORT0_4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PORT0_5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PORT0_6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORT0_7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PORT0_8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PORT0_9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PORT0_COMB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Spare11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>Spare13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>Spare14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>Spare15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>Spare51_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>Spare52_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>Spare53_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>Spare54_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>Spare55_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>Spare56_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>Spare57_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>Spare58_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>Spare59_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>Spare60_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>Spare61_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>Spare62_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>Spare63_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>Spare7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UARTOVF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_cm3ds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[80]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280RefreshTask
</UL>

<P><STRONG><a name="[96]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[161]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[86]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[162]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[89]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_addr16b_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[166]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[169]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[97]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[81]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[91]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[94]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8d]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[99]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[16d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[79]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11d]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[7d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[16f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9e]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[9d]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[9f]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[a0]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[8f]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a1]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[53]"></a>BME280RefreshTask</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, main.o(i.BME280RefreshTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BME280RefreshTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_ALL
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a6]"></a>BME280_Configuration</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, thp_bme280_drv.o(i.BME280_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BME280_Configuration &rArr; BME280_Write &rArr; write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit_Modification
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
</UL>

<P><STRONG><a name="[a2]"></a>BME280_Get_ALL</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, thp_bme280_drv.o(i.BME280_Get_ALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BME280_Get_ALL &rArr; BME280_Read &rArr; write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280RefreshTask
</UL>

<P><STRONG><a name="[ae]"></a>BME280_Get_DIG</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, thp_bme280_drv.o(i.BME280_Get_DIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BME280_Get_DIG &rArr; BME280_Read &rArr; write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
</UL>

<P><STRONG><a name="[af]"></a>BME280_ID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, thp_bme280_drv.o(i.BME280_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BME280_ID &rArr; BME280_Read &rArr; write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
</UL>

<P><STRONG><a name="[b0]"></a>BME280_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.BME280_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BME280_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Reset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_ID
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_DIG
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Configuration
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_init2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>BME280_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, thp_bme280_drv.o(i.BME280_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BME280_Reset &rArr; BME280_Write &rArr; write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
</UL>

<P><STRONG><a name="[b8]"></a>DELAY_TICK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(i.DELAY_TICK))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_DeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cm3ds_gpio.o(i.GPIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cm3ds_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[bd]"></a>GPIO_ResetBit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cm3ds_gpio.o(i.GPIO_ResetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_SetBit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cm3ds_gpio.o(i.GPIO_SetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b9]"></a>GT911_Scan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, touch_gt911_drv.o(i.GT911_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT911_Scan &rArr; GT9XX_ReadData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchRefreshTask
</UL>

<P><STRONG><a name="[bc]"></a>GT911_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, touch_gt911_drv.o(i.GT911_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GT911_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>GT9XX_ReadData</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, touch_gt911_drv.o(i.GT9XX_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GT9XX_ReadData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>

<P><STRONG><a name="[bb]"></a>GT9XX_WriteData</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, touch_gt911_drv.o(i.GT9XX_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GT9XX_WriteData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>

<P><STRONG><a name="[c4]"></a>LCD_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd_9488_drv.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Clear &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c6]"></a>LCD_DrawLine</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, lcd_9488_drv.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint_color &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint_color
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchRefreshTask
</UL>

<P><STRONG><a name="[c7]"></a>LCD_DrawPoint_color</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_9488_drv.o(i.LCD_DrawPoint_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DrawPoint_color &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchRefreshTask
</UL>

<P><STRONG><a name="[c8]"></a>LCD_Draw_Circle</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, lcd_9488_drv.o(i.LCD_Draw_Circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_DrawPoint_color &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint_color
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>LCD_Init</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, lcd_9488_drv.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>LCD_Set_Window</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lcd_9488_drv.o(i.LCD_Set_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Set_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint_color
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[e2]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, cm3ds_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicInit
</UL>

<P><STRONG><a name="[10e]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cm3ds_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[cd]"></a>SCD_Rev1Byte</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, scd.o(i.SCD_Rev1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCD_Rev1Byte &rArr; SCD_cmd_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_cmd_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRefreshTask
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cm3ds.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>UART0_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, int_handlers.o(i.UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART0_Handler &rArr; SCD_Rev1Byte &rArr; SCD_cmd_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITCLEAR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_Rev1Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3ds.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>UART_ITCLEAR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cm3ds_uart.o(i.UART_ITCLEAR))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[110]"></a>UART_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cm3ds_uart.o(i.UART_Init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[d0]"></a>UART_ReceiveData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cm3ds_uart.o(i.UART_ReceiveData))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[d6]"></a>UartPutc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cm3_retarget.o(i.UartPutc))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[93]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[84]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b3]"></a>delay_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_TICK
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cm3_retarget.o(i.fputc))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>ledRefreshTask</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, main.o(i.ledRefreshTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ledRefreshTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scd_send1Byte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_Rev1Byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scd_init_1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ahb_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_addr16b_test
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[de]"></a>mem_addr16b_test</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, main.o(i.mem_addr16b_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_addr16b_test &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>nvicInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.nvicInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvicInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>pvPortMalloc</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[f5]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[c3]"></a>read_i2c</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, i2c_gpio.o(i.read_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[b7]"></a>read_i2c2</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, i2c_gpio2.o(i.read_i2c2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay2
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Read
</UL>

<P><STRONG><a name="[dd]"></a>scd_init_1</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, scd_reg.o(i.scd_init_1))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>scd_send1Byte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, scd.o(i.scd_send1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scd_send1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRefreshTask
</UL>

<P><STRONG><a name="[c0]"></a>start_i2c</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c_gpio.o(i.start_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[b4]"></a>start_i2c2</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c_gpio2.o(i.start_i2c2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay2
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Read
</UL>

<P><STRONG><a name="[c1]"></a>stop_i2c</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, i2c_gpio.o(i.stop_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stop_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[b5]"></a>stop_i2c2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, i2c_gpio2.o(i.stop_i2c2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stop_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay2
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Read
</UL>

<P><STRONG><a name="[be]"></a>swi2c_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, i2c_gpio.o(i.swi2c_init))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
</UL>

<P><STRONG><a name="[b1]"></a>swi2c_init2</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, i2c_gpio2.o(i.swi2c_init2))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Init
</UL>

<P><STRONG><a name="[52]"></a>touchRefreshTask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.touchRefreshTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchRefreshTask &rArr; GT911_Scan &rArr; GT9XX_ReadData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint_color
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[db]"></a>uart0_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.uart0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>uart_ahb_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.uart_ahb_init))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[f9]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[e8]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[f4]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[e5]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[e7]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[e9]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[f2]"></a>vPortFree</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[116]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[103]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[a5]"></a>vTaskDelay</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchRefreshTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRefreshTask
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280RefreshTask
</UL>

<P><STRONG><a name="[11a]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[105]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[113]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[112]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[e0]"></a>vTaskStartScheduler</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[7e]"></a>vTaskSwitchContext</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[c2]"></a>write_i2c</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, i2c_gpio.o(i.write_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[b6]"></a>write_i2c2</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, i2c_gpio2.o(i.write_i2c2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_sda_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tyj_i2c_scl_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfUnitDelay2
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Read
</UL>

<P><STRONG><a name="[115]"></a>xPortStartScheduler</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[eb]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[118]"></a>xQueueGenericReset</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[ff]"></a>xQueueReceive</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[11b]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[df]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[119]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[d8]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRefreshTask
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[cf]"></a>xTaskIncrementTick</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f1]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[fa]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[102]"></a>xTaskResumeAll</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[114]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[72]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[120]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280RefreshTask
</UL>

<P><STRONG><a name="[11e]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof_tyj
</UL>

<P><STRONG><a name="[121]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[124]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280RefreshTask
</UL>

<P><STRONG><a name="[126]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_ALL
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof_tyj
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_VAR
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_DUMP
</UL>

<P><STRONG><a name="[172]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_ALL
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_VAR
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_DUMP
</UL>

<P><STRONG><a name="[173]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_ALL
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof_pow10
</UL>

<P><STRONG><a name="[127]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[11f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[123]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof_tyj
</UL>

<P><STRONG><a name="[128]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[68]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[125]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[ad]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_ALL
</UL>

<P><STRONG><a name="[12a]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[108]"></a>hfUnitDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i2c_gpio.o(i.hfUnitDelay))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c
</UL>

<P><STRONG><a name="[109]"></a>tyj_i2c_scl_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c_gpio.o(i.tyj_i2c_scl_read))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c
</UL>

<P><STRONG><a name="[10a]"></a>tyj_i2c_sda_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c_gpio.o(i.tyj_i2c_sda_read))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c
</UL>

<P><STRONG><a name="[ca]"></a>LCD_RD_DATA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_9488_drv.o(i.LCD_RD_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[10b]"></a>hfUnitDelay2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c_gpio2.o(i.hfUnitDelay2))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c2
</UL>

<P><STRONG><a name="[10c]"></a>tyj_i2c_scl_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c_gpio2.o(i.tyj_i2c_scl_read))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c2
</UL>

<P><STRONG><a name="[10d]"></a>tyj_i2c_sda_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c_gpio2.o(i.tyj_i2c_sda_read))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c2
</UL>

<P><STRONG><a name="[a9]"></a>BME280_Read</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, thp_bme280_drv.o(i.BME280_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BME280_Read &rArr; write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c2
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_ID
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_DIG
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Get_ALL
</UL>

<P><STRONG><a name="[a8]"></a>BME280_Write</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, thp_bme280_drv.o(i.BME280_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BME280_Write &rArr; write_i2c2
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c2
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Reset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Configuration
</UL>

<P><STRONG><a name="[a7]"></a>Bit_Modification</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, thp_bme280_drv.o(i.Bit_Modification))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bit_Modification
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280_Configuration
</UL>

<P><STRONG><a name="[107]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[111]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[55]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[ee]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[f0]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[f7]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[f8]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[104]"></a>prvUnlockQueue</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[e3]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[e6]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[ec]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[ed]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[56]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[f3]"></a>prvInitialiseNewTask</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[11c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[ea]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[f6]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[fb]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[fd]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[100]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[fc]"></a>prvReloadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[fe]"></a>prvSampleTimeNow</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvSampleTimeNow &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[57]"></a>prvTimerTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[5c]"></a>SCD_CMD_CALL</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, scd.o(i.SCD_CMD_CALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCD_CMD_CALL &rArr; cz_atol &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cz_atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>SCD_CMD_CHG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scd.o(i.SCD_CMD_CHG))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCD_CMD_CHG &rArr; cz_atol &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cz_atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>SCD_CMD_CONF</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, scd.o(i.SCD_CMD_CONF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCD_CMD_CONF &rArr; cz_atol &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cz_atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>SCD_CMD_DUMP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scd.o(i.SCD_CMD_DUMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCD_CMD_DUMP &rArr; cz_atol &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cz_atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>SCD_CMD_SET</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, scd.o(i.SCD_CMD_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SCD_CMD_SET &rArr; atof_tyj &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cz_atol
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof_tyj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>SCD_cmd_handle</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, scd.o(i.SCD_cmd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCD_cmd_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_Rev1Byte
</UL>

<P><STRONG><a name="[5f]"></a>SCO_DEBUG</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scd.o(i.SCO_DEBUG))
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>SCO_DUMP</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, scd.o(i.SCO_DUMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCO_DUMP
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>SCO_PRINT</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, scd.o(i.SCO_PRINT))
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>SCO_VAR</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, scd.o(i.SCO_VAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = SCO_VAR &rArr;  SCO_VAR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_VAR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_VAR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>SCO_get</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, scd.o(i.SCO_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = SCO_get &rArr;  SCO_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>_atof_pow10</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, scd.o(i._atof_pow10))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _atof_pow10 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof_tyj
</UL>

<P><STRONG><a name="[d3]"></a>_cz_strtoxl</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, scd.o(i._cz_strtoxl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _cz_strtoxl
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cz_atol
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof_tyj
</UL>

<P><STRONG><a name="[cc]"></a>atof_tyj</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, scd.o(i.atof_tyj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atof_tyj &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cz_strtoxl
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof_pow10
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_SET
</UL>

<P><STRONG><a name="[cb]"></a>cz_atol</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scd.o(i.cz_atol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cz_atol &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cz_strtoxl
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_SET
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_DUMP
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_CONF
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_CHG
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_CALL
</UL>

<P><STRONG><a name="[129]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[122]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[8c]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[51]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
